/*
 * @ PrinterKasir is made by FGroupIndonesia
 * for open source community!
 * Please contact our support if you need any assistance 
 * including : modification, trainings, and etc.
 */
package frame;

import helper.FileSystemManager;
import helper.MessageBox;
import beans.Profile;
import helper.TextFormatter;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ASUS
 */
public class ProfileDialog extends javax.swing.JDialog {

    /**
     * Creates new form ProfileDialog
     */
    FileSystemManager fsm;
    PrinterKasirFrame parentFrame;
    ArrayList<Profile> dataProf;

    public ProfileDialog(javax.swing.JFrame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        fsm = new FileSystemManager();

        parentFrame = (PrinterKasirFrame) parent;
        dataProf = fsm.getAllProfiles();

        if (dataProf.size() > 0) {

            renderTableData();
        }
    }

    private void renderTableData() {
        DefaultTableModel dtm = (DefaultTableModel) tableProfileData.getModel();
        String command = TextFormatter.asUnderlinedHTML("browse");
        String filename = null;

        for (Profile prof : dataProf) {

            if (prof.getPicture() != null) {
                command = TextFormatter.asUnderlinedHTML("preview");
                filename = prof.getPicture().getName();
            }
            dtm.addRow(new Object[]{false, -1, prof.getTitle(), prof.getAddress(), command, filename});

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        buttonSaveProfileData = new javax.swing.JButton();
        buttonClearProfileData = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        comboboxAction = new javax.swing.JComboBox<>();
        buttonApplyAction = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProfileData = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jButton1.setText("Add New");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        buttonSaveProfileData.setText("Save");
        buttonSaveProfileData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveProfileDataActionPerformed(evt);
            }
        });
        jPanel2.add(buttonSaveProfileData);

        buttonClearProfileData.setText("Clear");
        buttonClearProfileData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearProfileDataActionPerformed(evt);
            }
        });
        jPanel2.add(buttonClearProfileData);

        jLabel1.setText("Set Actions : ");
        jPanel2.add(jLabel1);

        comboboxAction.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Delete Data", "Remove Pictures" }));
        comboboxAction.setSelectedIndex(-1);
        jPanel2.add(comboboxAction);

        buttonApplyAction.setText("Apply");
        buttonApplyAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonApplyActionActionPerformed(evt);
            }
        });
        jPanel2.add(buttonApplyAction);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel1.setLayout(new java.awt.BorderLayout());

        tableProfileData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "ID", "Title", "Address", "Picture", "Filename"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableProfileData.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tableProfileData.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                tableProfileDataMouseMoved(evt);
            }
        });
        tableProfileData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProfileDataMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tableProfileDataMouseEntered(evt);
            }
        });
        tableProfileData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableProfileDataKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tableProfileData);
        if (tableProfileData.getColumnModel().getColumnCount() > 0) {
            tableProfileData.getColumnModel().getColumn(0).setMinWidth(20);
            tableProfileData.getColumnModel().getColumn(0).setPreferredWidth(20);
            tableProfileData.getColumnModel().getColumn(0).setMaxWidth(20);
            tableProfileData.getColumnModel().getColumn(1).setMinWidth(0);
            tableProfileData.getColumnModel().getColumn(1).setPreferredWidth(0);
            tableProfileData.getColumnModel().getColumn(1).setMaxWidth(0);
            tableProfileData.getColumnModel().getColumn(2).setResizable(false);
            tableProfileData.getColumnModel().getColumn(2).setPreferredWidth(75);
            tableProfileData.getColumnModel().getColumn(3).setResizable(false);
            tableProfileData.getColumnModel().getColumn(3).setPreferredWidth(100);
            tableProfileData.getColumnModel().getColumn(4).setMinWidth(65);
            tableProfileData.getColumnModel().getColumn(4).setPreferredWidth(65);
            tableProfileData.getColumnModel().getColumn(4).setMaxWidth(65);
            tableProfileData.getColumnModel().getColumn(5).setMinWidth(0);
            tableProfileData.getColumnModel().getColumn(5).setPreferredWidth(0);
            tableProfileData.getColumnModel().getColumn(5).setMaxWidth(0);
        }

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonClearProfileDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearProfileDataActionPerformed
        if (MessageBox.asking("Are you sure for clearing all the profiles here???") == MessageBox.YES) {
            fsm.clearAllProfile();

            // clearing jtable
            DefaultTableModel dtm = (DefaultTableModel) tableProfileData.getModel();
            dtm.setRowCount(0);

            // preparing a new empty data
            dtm.addRow(new Object[]{false, -1, "", "", "browse", ""});

        }


    }//GEN-LAST:event_buttonClearProfileDataActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // call the save button functions
        saveDataProfiles();
        // refresh the parent
        parentFrame.prepareProfiles();
    }//GEN-LAST:event_formWindowClosing

    private void buttonSaveProfileDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveProfileDataActionPerformed
        // grabbing data from jtable to arraylist
        // then passing to FileSystemManager

        saveDataProfiles();

    }//GEN-LAST:event_buttonSaveProfileDataActionPerformed

    private void saveDataProfiles() {
        ArrayList<Profile> data = new ArrayList<Profile>();

        // started by 2nd column.
        int rowIndex = 0, colIndex = 2, totalRow = tableProfileData.getRowCount();
        for (int x = 0; x < totalRow; x++) {
            rowIndex = x;

            try {

                String cell1Value = tableProfileData.getValueAt(rowIndex, colIndex).toString();
                String cell2Value = tableProfileData.getValueAt(rowIndex, colIndex + 1).toString();
                String cell3Value = tableProfileData.getValueAt(rowIndex, colIndex + 2).toString();
                String cell4Value = tableProfileData.getValueAt(rowIndex, colIndex + 3).toString();

                if (cell1Value.trim().length() != 0) {
                    // we take the value if it is not empty
                    Profile pfile = new Profile();
                    pfile.setTitle(cell1Value);
                    pfile.setAddress(cell2Value);

                    if (cell3Value.contains("browse")) {
                        pfile.setPicture(null);
                    } else if (cell3Value.contains("preview")) {
                        pfile.setPicture(fsm.getProfilePictureObject(cell4Value));
                    }

                    data.add(pfile);
                }

            } catch (Exception ex) {
                // continue to read another row
            }

        }

        // lastly save it
        if (data.size() > 0) {
            fsm.saveProfile(data);
            //MessageBox.showing("Profile is successfully saved!");
        }
    }

    private void tableProfileDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProfileDataMouseClicked
        int row = tableProfileData.rowAtPoint(evt.getPoint());
        int col = tableProfileData.columnAtPoint(evt.getPoint());
        String perintah = tableProfileData.getValueAt(row, col).toString();
        String filename = null;

        int hasil;

        if (col == 4 && perintah.contains("browse")) {
            hasil = jFileChooser.showOpenDialog(this);
            if (hasil == JFileChooser.APPROVE_OPTION) {
                File selectedFile = jFileChooser.getSelectedFile();
                //System.out.println("Selected file: " + selectedFile.getAbsolutePath());
                fsm.copyFile(selectedFile, fsm.getProfilePictureObject(selectedFile.getName()));

                // we change the link text then,
                // we set the file name to the right side of that browse link
                tableProfileData.setValueAt(TextFormatter.asUnderlinedHTML("preview"), row, col);
                tableProfileData.setValueAt(selectedFile.getName(), row, col + 1);
            }
        } else if (col == 4 && perintah.contains("preview")) {
            // for previewing
            Desktop dt = Desktop.getDesktop();
            try {
                filename = tableProfileData.getValueAt(row, col + 1).toString();
                dt.open(fsm.getProfilePictureObject(filename));
            } catch (Exception ex) {
                System.err.println("Error while previewing image. " + ex.getMessage());
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_tableProfileDataMouseClicked

    private void tableProfileDataMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProfileDataMouseEntered


    }//GEN-LAST:event_tableProfileDataMouseEntered

    private void tableProfileDataMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProfileDataMouseMoved
        //int row = tableProfileData.rowAtPoint(evt.getPoint());
        int col = tableProfileData.columnAtPoint(evt.getPoint());

        if (col != 4) {
            tableProfileData.setCursor(Cursor.getDefaultCursor());
        } else {
            tableProfileData.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_tableProfileDataMouseMoved

    private void buttonApplyActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonApplyActionActionPerformed
        // we only have 2 action:
        // delete data or remove picture

        int rowIndex, colIndex = 0;
        ArrayList<Integer> rows = new ArrayList<Integer>();

        if (comboboxAction.getSelectedIndex() != -1) {
            String act = comboboxAction.getSelectedItem().toString().toLowerCase();
            if (act.contains("delete")) {
                // we need deleting
                for (int x = 0; x < tableProfileData.getRowCount(); x++) {
                    rowIndex = x;

                    // when checked value is exists
                    try {
                        if (Boolean.valueOf(tableProfileData.getValueAt(rowIndex, colIndex).toString())) {
                            // store for deleting later
                            rows.add(rowIndex);
                        } else {
                            // when false by checked occured
                        }

                    } catch (Exception ex) {
                        // when false is occured
                    }

                }

                if (rows.size() > 0) {
                    int backIndex = rows.size() - 1;
                    while (backIndex > -1) {
                        ((DefaultTableModel) tableProfileData.getModel()).removeRow(rows.get(backIndex));
                        backIndex--;
                    }
                }

            } else if (act.contains("remove")) {
                // we shall remove pictures
            }
        }


    }//GEN-LAST:event_buttonApplyActionActionPerformed

    private void addEmptyRow() {
        DefaultTableModel dtm = (DefaultTableModel) tableProfileData.getModel();

        // preparing a new empty data
        dtm.addRow(new Object[]{false, -1, "", "", "browse", ""});
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addEmptyRow();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tableProfileDataKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableProfileDataKeyReleased
        int row = tableProfileData.getSelectedRow();
        int cell = tableProfileData.getSelectedColumn();

        int manyCols = tableProfileData.getColumnCount();
        int manyRows = tableProfileData.getRowCount();

        System.out.println("now at row " + row + " and cell " + cell + " where total cell is " + manyCols + " total row is " + manyRows);

        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            if (cell <= manyCols - 2) {
                tableProfileData.editCellAt(row, cell++);
            } else {
                if (row == manyRows - 1) {
                    addEmptyRow();
                }
                tableProfileData.editCellAt(row++, 0);
            }
        }
    }//GEN-LAST:event_tableProfileDataKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProfileDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProfileDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProfileDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProfileDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ProfileDialog dialog = new ProfileDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonApplyAction;
    private javax.swing.JButton buttonClearProfileData;
    private javax.swing.JButton buttonSaveProfileData;
    private javax.swing.JComboBox<String> comboboxAction;
    private javax.swing.JButton jButton1;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableProfileData;
    // End of variables declaration//GEN-END:variables
}
